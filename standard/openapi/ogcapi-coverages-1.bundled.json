{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0",
    "title": "OGC API - Coverages",
    "description": "Example API Definition for OGC API - Coverages - Part 1: Core",
    "contact": {
      "name": "Open Geospatial Consortium",
      "url": "https://ogc.org",
      "email": "info@ogc.org"
    },
    "license": {
      "name": "OGC License",
      "url": "http://www.opengeospatial.org/legal/"
    }
  },
  "servers": [
    {
      "description": "Example OGC API - Coverages server",
      "url": "https://maps.ecere.com/ogcapi"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Landing Page"
        ],
        "operationId": "getLandingPage",
        "summary": "Retrieve the OGC API landing page for this service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LandingPage"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/conformance": {
      "get": {
        "tags": [
          "Conformance"
        ],
        "operationId": "getConformance",
        "summary": "Retrieve the set of OGC API conformance classes that are supported by this service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Conformance"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/api": {
      "get": {
        "tags": [
          "API"
        ],
        "operationId": "getAPI",
        "summary": "Retrieve this API definition.",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/API"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/api/all-collections": {
      "get": {
        "tags": [
          "API"
        ],
        "operationId": "getAPICollections",
        "summary": "Retrieve the list of collections available from this API implementation & deployment.",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Enumeration"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/api/coverage-collections": {
      "get": {
        "tags": [
          "API"
        ],
        "operationId": "getAPICoverageCollections",
        "summary": "Retrieve the list of coverages collections available from this API implementation & deployment.",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Enumeration"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/api/tileMatrixSets": {
      "get": {
        "tags": [
          "API"
        ],
        "operationId": "getAPITileMatrixSets",
        "summary": "Retrieve the list of shared TileMatrixSets available from this API implementation & deployment.",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Enumeration"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/collections": {
      "get": {
        "tags": [
          "Data Collections"
        ],
        "operationId": "getCollectionsList",
        "summary": "Retrieve the list of geospatial data collections available from this service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/bbox"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The optional limit parameter limits the number of collections that are presented in the response document.\nOnly items are counted that are on the first level of the collection in the response document. Nested objects contained within the explicitly requested items shall not be counted.\n* Minimum = 1 * Maximum = 10000 * Default = 10",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000,
              "default": 10
            },
            "style": "form",
            "explode": false
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CollectionsList"
          }
        }
      }
    },
    "/collections/{collectionId}": {
      "get": {
        "tags": [
          "Data Collections"
        ],
        "operationId": "getCollection",
        "summary": "Retrieve the description of a collection available from this service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-all"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Collection"
          }
        }
      }
    },
    "/collections/{collectionId}/coverage": {
      "get": {
        "tags": [
          "Coverage"
        ],
        "summary": "Retrieve the coverage identified by {collectionId}",
        "description": "Coverage identified by {collectionId}.\nUse content negotiation to request required format.",
        "operationId": "getCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-coverage"
          },
          {
            "$ref": "#/components/parameters/subset"
          },
          {
            "$ref": "#/components/parameters/bbox"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/properties"
          },
          {
            "$ref": "#/components/parameters/scale-factor"
          },
          {
            "$ref": "#/components/parameters/scale-axes"
          },
          {
            "$ref": "#/components/parameters/scale-size"
          },
          {
            "$ref": "#/components/parameters/subset-crs"
          },
          {
            "$ref": "#/components/parameters/bbox-crs"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/f-coverage"
          }
        ],
        "responses": {
          "200": {
            "description": "A full coverage.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/coverageSchema"
                }
              },
              "image/tiff; application=geotiff": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "multipart/related": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Exception"
          }
        }
      }
    },
    "/collections/{collectionId}/coverage/domainset": {
      "get": {
        "tags": [
          "Coverage"
        ],
        "summary": "Retrieve a coverage's domainset; use content negotiation to request HTML or JSON",
        "description": "a coverage's domainset",
        "operationId": "getCoverageDomainSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-coverage"
          },
          {
            "$ref": "#/components/parameters/subset"
          },
          {
            "$ref": "#/components/parameters/bbox"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/bbox-crs"
          },
          {
            "$ref": "#/components/parameters/subset-crs"
          },
          {
            "$ref": "#/components/parameters/f-domainset"
          }
        ],
        "responses": {
          "200": {
            "description": "A coverages domainset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domainSet"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Exception"
          }
        }
      }
    },
    "/collections/{collectionId}/coverage/rangetype": {
      "get": {
        "tags": [
          "Coverage"
        ],
        "summary": "Retrieve a coverage's rangetype; use content negotiation to request HTML or JSON",
        "description": "a coverage's rangetype",
        "operationId": "getCoverageRangeType",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-coverage"
          },
          {
            "$ref": "#/components/parameters/f-rangetype"
          }
        ],
        "responses": {
          "200": {
            "description": "A coverage's rangetype.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rangeType"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Exception"
          }
        }
      }
    },
    "/collections/{collectionId}/coverage/rangeset": {
      "get": {
        "tags": [
          "Coverage"
        ],
        "summary": "Retrieve a coverage's rangeset (i.e., the data record values only); use content negotiation to specify output format",
        "description": "a coverage's rangeset",
        "operationId": "getCoverageRangeSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-coverage"
          },
          {
            "$ref": "#/components/parameters/subset"
          },
          {
            "$ref": "#/components/parameters/bbox"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/properties"
          },
          {
            "$ref": "#/components/parameters/scale-factor"
          },
          {
            "$ref": "#/components/parameters/scale-axes"
          },
          {
            "$ref": "#/components/parameters/scale-size"
          },
          {
            "$ref": "#/components/parameters/bbox-crs"
          },
          {
            "$ref": "#/components/parameters/subset-crs"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/f-rangeset"
          }
        ],
        "responses": {
          "200": {
            "description": "A coverage's range set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rangeSet"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Exception"
          }
        }
      }
    },
    "/collections/{collectionId}/coverage/metadata": {
      "get": {
        "tags": [
          "Coverage"
        ],
        "summary": "retrieve a coverage's metadata; use content negotiation to request HTML or GeoJSON",
        "description": "a coverage's metadata",
        "operationId": "getCoverageMetadata",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-coverage"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "description": "A coverage's metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/coverageSchema/oneOf/0/properties/metadata"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Exception"
          }
        }
      }
    },
    "/collections/{collectionId}/coverage/tiles": {
      "get": {
        "tags": [
          "Coverage Tiles"
        ],
        "summary": "Retrieve the list of available coverage tilesets for the specified collection.",
        "operationId": ".collection.coverage.getTileSetsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-coverage"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSetsList"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/collections/{collectionId}/coverage/tiles/{tileMatrixSetId}": {
      "get": {
        "tags": [
          "Coverage Tiles"
        ],
        "summary": "Retrieve the coverage tileset metadata for the specified collection and tiling scheme (tile matrix set)",
        "operationId": ".collection.coverage.getTileSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-coverage"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSet"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/collections/{collectionId}/coverage/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}": {
      "get": {
        "tags": [
          "Coverage Tiles"
        ],
        "summary": "Retrieve coverage tiles",
        "operationId": ".collection.coverage.getTile",
        "parameters": [
          {
            "$ref": "#/components/parameters/tileMatrix"
          },
          {
            "$ref": "#/components/parameters/tileRow"
          },
          {
            "$ref": "#/components/parameters/tileCol"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/collectionId-coverage"
          },
          {
            "$ref": "#/components/parameters/subset"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/subset-crs"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-coverageTile"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CoverageTile"
          },
          "204": {
            "$ref": "#/components/responses/EmptyTile"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "confClasses": {
        "type": "object",
        "required": [
          "conformsTo"
        ],
        "properties": {
          "conformsTo": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "link": {
        "type": "object",
        "required": [
          "href",
          "rel"
        ],
        "properties": {
          "href": {
            "type": "string",
            "description": "Supplies the URI to a remote resource (or resource fragment).",
            "example": "http://data.example.com/buildings/123"
          },
          "rel": {
            "type": "string",
            "description": "The type or semantics of the relation.",
            "example": "alternate"
          },
          "type": {
            "type": "string",
            "description": "A hint indicating what the media type of the result of dereferencing the link should be.",
            "example": "application/geo+json"
          },
          "templated": {
            "type": "boolean",
            "description": "This flag set to true if the link is a URL template."
          },
          "varBase": {
            "description": "A base path to retrieve semantic information about the variables used in URL template.",
            "type": "string",
            "example": "/ogcapi/vars/"
          },
          "hreflang": {
            "type": "string",
            "description": "A hint indicating what the language of the result of dereferencing the link should be.",
            "example": "en"
          },
          "title": {
            "type": "string",
            "description": "Used to label the destination of a link such that it can be used as a human-readable identifier.",
            "example": "Trierer Strasse 70, 53115 Bonn"
          },
          "length": {
            "type": "integer"
          }
        }
      },
      "landingPage": {
        "type": "object",
        "required": [
          "links"
        ],
        "properties": {
          "title": {
            "type": "string",
            "title": "The title of the API.",
            "description": "While a title is not required, implementors are strongly advised to include one.",
            "example": "Buildings in Bonn"
          },
          "description": {
            "type": "string",
            "example": "Access to data about buildings in the city of Bonn via a Web API that conforms to the OGC API Common specification."
          },
          "attribution": {
            "type": "string",
            "title": "attribution for the API",
            "description": "The `attribution` should be short and intended for presentation to a user, for example, in a corner of a map. Parts of the text can be links to other resources if additional information is needed. The string can include HTML markup."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          }
        }
      },
      "exception": {
        "title": "Exception Schema",
        "description": "JSON schema for exceptions based on RFC 7807",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "detail": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          }
        }
      },
      "collections": {
        "type": "object",
        "required": [
          "links",
          "collections"
        ],
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "numberMatched": {
            "type": "integer",
            "minimum": 0,
            "example": 1
          },
          "numberReturned": {
            "type": "integer",
            "minimum": 0,
            "example": 1
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectionInfo"
            }
          }
        }
      },
      "collectionInfo": {
        "type": "object",
        "required": [
          "id",
          "links"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "identifier of the collection used, for example, in URIs",
            "example": "dem"
          },
          "title": {
            "type": "string",
            "description": "human readable title of the collection",
            "example": "Digital Elevation Model"
          },
          "description": {
            "type": "string",
            "description": "a description of the data in the collection",
            "example": "A Digital Elevation Model."
          },
          "links": {
            "type": "array",
            "example": [
              {
                "href": "http://data.example.org/collections/dem?f=json",
                "rel": "self",
                "type": "application/json",
                "title": "Digital Elevation Model"
              },
              {
                "href": "http://data.example.org/collections/dem?f=html",
                "rel": "alternate",
                "type": "application/json",
                "title": "Digital Elevation Model"
              },
              {
                "href": "http://data.example.org/collections/dem/coverage",
                "rel": "coverage",
                "type": "image/tiff; application=geotiff",
                "title": "Digital Elevation Model"
              },
              {
                "href": "http://data.example.org/collections/dem/coverage/domainset",
                "rel": "domainset",
                "type": "application/json",
                "title": "Digital Elevation Model"
              },
              {
                "href": "http://data.example.org/collections/dem/coverage/rangetype",
                "rel": "rangetype",
                "type": "application/json",
                "title": "Digital Elevation Model"
              },
              {
                "href": "http://data.example.org/collections/dem/coverage/metadata",
                "rel": "metadata",
                "type": "application/json",
                "title": "Digital Elevation Model"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/link"
            }
          },
          "extent": {
            "$ref": "#/components/schemas/extent-uad"
          },
          "itemType": {
            "description": "indicator about the type of the items in the collection if the collection has an accessible /collections/{collectionId}/items endpoint",
            "type": "string",
            "default": "unknown"
          },
          "crs": {
            "description": "the list of coordinate reference systems supported by the API; the first item is the default coordinate reference system",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
            ],
            "example": [
              "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
              "http://www.opengis.net/def/crs/EPSG/0/4326"
            ]
          },
          "dataType": {
            "allOf": [
              {
                "description": "Type of data represented in the collection"
              },
              {
                "$ref": "#/components/schemas/dataType"
              }
            ]
          },
          "geometryDimension": {
            "description": "The geometry dimension of the features shown in this layer (0: points, 1: curves, 2: surfaces, 3: solids), unspecified: mixed or unknown",
            "type": "integer",
            "minimum": 0,
            "maximum": 3
          },
          "minScaleDenominator": {
            "description": "Minimum scale denominator for usage of the collection",
            "type": "number"
          },
          "maxScaleDenominator": {
            "description": "Maximum scale denominator for usage of the collection",
            "type": "number"
          },
          "minCellSize": {
            "description": "Minimum cell size for usage of the collection",
            "type": "number"
          },
          "maxCellSize": {
            "description": "Maximum cell size for usage of the collection",
            "type": "number"
          }
        }
      },
      "extent": {
        "description": "The extent of the data in the collection. In the Core only spatial and temporal\nextents are specified. Extensions may add additional members to represent other\nextents, for example, thermal or pressure ranges.\n\nThe first item in the array describes the overall extent of\nthe data. All subsequent items describe more precise extents,\ne.g., to identify clusters of data.\nClients only interested in the overall extent will only need to\naccess the first item in each array.",
        "type": "object",
        "properties": {
          "spatial": {
            "description": "The spatial extent of the data in the collection.",
            "type": "object",
            "properties": {
              "bbox": {
                "description": "One or more bounding boxes that describe the spatial extent of the dataset.\nIn the Core only a single bounding box is supported.\n\nExtensions may support additional areas.\nThe first bounding box describes the overall spatial\nextent of the data. All subsequent bounding boxes describe\nmore precise bounding boxes, e.g., to identify clusters of data.\nClients only interested in the overall spatial extent will\nonly need to access the first item in each array.",
                "type": "array",
                "minItems": 1,
                "items": {
                  "description": "Each bounding box is provided as four or six numbers, depending on\nwhether the coordinate reference system includes a vertical axis\n(height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nIf the value consists of four numbers, the coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in a parameter `bbox-crs`.\n\nIf the value consists of six numbers, the coordinate reference system is WGS 84\nlongitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\nunless a different coordinate reference system is specified in a parameter `bbox-crs`.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
                  "type": "array",
                  "oneOf": [
                    {
                      "minItems": 4,
                      "maxItems": 4
                    },
                    {
                      "minItems": 6,
                      "maxItems": 6
                    }
                  ],
                  "items": {
                    "type": "number"
                  },
                  "example": [
                    -180,
                    -90,
                    180,
                    90
                  ]
                }
              },
              "crs": {
                "description": "Coordinate reference system of the coordinates in the spatial extent\n(property `bbox`). The default reference system is WGS 84 longitude/latitude.\nIn the Core the only other supported coordinate reference system is\nWGS 84 longitude/latitude/ellipsoidal height for coordinates with height.\nExtensions may support additional coordinate reference systems and add\nadditional enum values.",
                "type": "string",
                "enum": [
                  "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
                  "http://www.opengis.net/def/crs/OGC/0/CRS84h"
                ],
                "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
              },
              "grid": {
                "description": "Provides information about the limited availability of data within the collection organized\nas a grid (regular or irregular) along each spatial dimension.",
                "type": "array",
                "minItems": 2,
                "maxItems": 3,
                "items": {
                  "type": "object",
                  "properties": {
                    "coordinates": {
                      "description": "List of coordinates along the dimension for which data organized as an irregular grid in the collection is available\n(e.g., 2, 10, 80, 100).",
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                            "nullable": true
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "example": [
                        2,
                        10,
                        80,
                        100
                      ]
                    },
                    "cellsCount": {
                      "description": "Number of samples available along the dimension for data organized as a regular grid.\nFor values representing the whole area of contiguous cells spanning _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_.\nFor values representing infinitely small point cells spaced by _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_ + 1.",
                      "type": "integer",
                      "example": 50
                    },
                    "resolution": {
                      "description": "Resolution of regularly gridded data along the dimension in the collection",
                      "oneOf": [
                        {
                          "type": "string",
                          "nullable": true
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "example": 0.0006866455078
                    }
                  }
                }
              }
            }
          },
          "temporal": {
            "description": "The temporal extent of the features in the collection.",
            "type": "object",
            "properties": {
              "interval": {
                "description": "One or more time intervals that describe the temporal extent of the dataset.\nIn the Core only a single time interval is supported.\n\nExtensions may support multiple intervals.\nThe first time interval describes the overall\ntemporal extent of the data. All subsequent time intervals describe\nmore precise time intervals, e.g., to identify clusters of data.\nClients only interested in the overall extent will only need\nto access the first item in each array.",
                "type": "array",
                "minItems": 1,
                "items": {
                  "description": "Begin and end times of the time interval. The timestamps are in the\ntemporal coordinate reference system specified in `trs`. By default\nthis is the Gregorian calendar.\n\nThe value `null` for start or end time is supported and indicates a half-bounded time interval.",
                  "type": "array",
                  "minItems": 2,
                  "maxItems": 2,
                  "items": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true
                  },
                  "example": [
                    "2011-11-11T12:22:11Z",
                    null
                  ]
                }
              },
              "trs": {
                "description": "Coordinate reference system of the coordinates in the temporal extent\n(property `interval`). The default reference system is the Gregorian calendar.\nIn the Core this is the only supported temporal coordinate reference system.\nExtensions may support additional temporal coordinate reference systems and add\nadditional enum values.",
                "type": "string",
                "enum": [
                  "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
                ],
                "default": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
              }
            }
          }
        }
      },
      "extent-uad": {
        "title": "Extent with Uniform Additional Dimensions Schema",
        "description": "The extent module only addresses spatial and temporal extents. This module extends extent by specifying how\nintervals and crs properties can be used to specify additional geometries.",
        "allOf": [
          {
            "$ref": "#/components/schemas/extent"
          },
          {
            "type": "object",
            "additionalProperties": {
              "description": "The domain intervals for any additional dimensions of the extent (envelope) beyond those described in temporal and spatial.",
              "type": "object",
              "oneOf": [
                {
                  "required": [
                    "interval",
                    "crs"
                  ]
                },
                {
                  "required": [
                    "interval",
                    "trs"
                  ]
                },
                {
                  "required": [
                    "interval",
                    "vrs"
                  ]
                }
              ],
              "properties": {
                "interval": {
                  "description": "One or more intervals that describe the extent for this dimension of the dataset.\nThe value `null` is supported and indicates an unbounded or half-bounded interval.\nThe first interval describes the overall extent of the data for this dimension.\nAll subsequent intervals describe more precise intervals, e.g., to identify clusters of data.\nClients only interested in the overall extent will only need\nto access the first item (a pair of lower and upper bound values).",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "Lower and upper bound values of the interval. The values\nare in the coordinate reference system specified in `crs`, `trs` or `vrs`.",
                    "type": "array",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": {
                      "oneOf": [
                        {
                          "type": "string",
                          "nullable": true
                        },
                        {
                          "type": "number"
                        }
                      ]
                    },
                    "example": [
                      "2011-11-11T12:22:11Z",
                      32.5,
                      null
                    ]
                  }
                },
                "crs": {
                  "type": "string",
                  "description": "generic coordinate reference system suitable for any type of dimensions"
                },
                "trs": {
                  "type": "string",
                  "description": "temporal coordinate reference system (e.g. as defined by Features for 'temporal')"
                },
                "vrs": {
                  "type": "string",
                  "description": "vertical coordinate reference system (e.g. as defined in EDR for 'vertical')"
                },
                "grid": {
                  "type": "object",
                  "description": "Provides information about the limited availability of data within the collection organized as a grid (regular or irregular) along the dimension.",
                  "properties": {
                    "coordinates": {
                      "description": "List of coordinates along the temporal dimension for which data organized as an irregular grid in the collection is available\n(e.g., 2, 10, 80, 100).",
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                            "nullable": true
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "example": [
                        2,
                        10,
                        80,
                        100
                      ]
                    },
                    "cellsCount": {
                      "description": "Number of samples available along the dimension for data organized as a regular grid.\nFor values representing the whole area of contiguous cells spanning _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_.\nFor values representing infinitely small point cells spaced by _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_ + 1.",
                      "type": "integer",
                      "example": 50
                    },
                    "resolution": {
                      "description": "Resolution of regularly gridded data along the dimension in the collection",
                      "oneOf": [
                        {
                          "type": "string",
                          "nullable": true
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "example": [
                        "PT1H",
                        0.0006866455078
                      ]
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "crs": {
        "title": "CRS",
        "oneOf": [
          {
            "description": "Simplification of the object into a url if the other properties are not present",
            "type": "string"
          },
          {
            "type": "object",
            "oneOf": [
              {
                "required": [
                  "uri"
                ],
                "properties": {
                  "uri": {
                    "description": "Reference to one coordinate reference system (CRS)",
                    "type": "string",
                    "format": "uri"
                  }
                }
              },
              {
                "required": [
                  "wkt"
                ],
                "properties": {
                  "wkt": {
                    "allOf": [
                      {
                        "description": "A string defining the CRS using the JSON encodng for Well-known text representation of coordinate reference systems 2.0"
                      },
                      {
                        "type": "object"
                      }
                    ]
                  }
                }
              },
              {
                "required": [
                  "referenceSystem"
                ],
                "properties": {
                  "referenceSystem": {
                    "description": "A reference system data structure as defined in the MD_ReferenceSystem of the ISO 19115",
                    "type": "object"
                  }
                }
              }
            ]
          }
        ]
      },
      "dataType": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "map",
              "vector",
              "coverage"
            ]
          }
        ]
      },
      "timeStamp": {
        "description": "This property indicates the time and date when the response was generated using RFC 3339 notation.",
        "type": "string",
        "format": "date-time",
        "example": "2017-08-17T08:05:32Z"
      },
      "numberReturned": {
        "description": "The number of features in the feature collection.\nA server may omit this information in a response, if the information\nabout the number of features is not known or difficult to compute.\nIf the value is provided, the value shall be identical to the number\nof items in the \"features\" array.",
        "type": "integer",
        "minimum": 0,
        "example": 10
      },
      "numberMatched": {
        "description": "The number of features of the feature type that match the selection\nparameters like `bbox`.",
        "type": "integer",
        "minimum": 0,
        "example": 127
      },
      "domainSet": {
        "type": "object",
        "title": "domainSet",
        "description": "The domainSet describes the *direct positions* of the coverage, i.e., the locations for which values are available.",
        "oneOf": [
          {
            "required": [
              "type",
              "generalGrid"
            ],
            "properties": {
              "type": {
                "enum": [
                  "DomainSet"
                ]
              },
              "generalGrid": {
                "title": "General Grid",
                "description": "A general n-D grid is defined through a sequence of axes, each of which can be of a particular axis type.",
                "type": "object",
                "required": [
                  "type"
                ],
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "enum": [
                      "GeneralGridCoverage"
                    ]
                  },
                  "id": {
                    "type": "string"
                  },
                  "srsName": {
                    "type": "string",
                    "format": "uri"
                  },
                  "axisLabels": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "axis": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "oneOf": [
                        {
                          "title": "Index Axis",
                          "description": "An Index Axis is an axis with only integer positions allowed.",
                          "required": [
                            "type",
                            "axisLabel",
                            "lowerBound",
                            "upperBound"
                          ],
                          "additionalProperties": false,
                          "properties": {
                            "type": {
                              "enum": [
                                "IndexAxis"
                              ]
                            },
                            "id": {
                              "type": "string"
                            },
                            "axisLabel": {
                              "type": "string"
                            },
                            "lowerBound": {
                              "type": "number"
                            },
                            "upperBound": {
                              "type": "number"
                            }
                          }
                        },
                        {
                          "title": "Regular Axis",
                          "description": "A Regular Axis is an axis where all direct coordinates are at a common distance from its immediate neighbors.",
                          "required": [
                            "type",
                            "axisLabel",
                            "lowerBound",
                            "upperBound",
                            "resolution",
                            "uomLabel"
                          ],
                          "additionalProperties": false,
                          "properties": {
                            "type": {
                              "enum": [
                                "RegularAxis"
                              ]
                            },
                            "id": {
                              "type": "string"
                            },
                            "axisLabel": {
                              "type": "string"
                            },
                            "lowerBound": {
                              "type": "string"
                            },
                            "upperBound": {
                              "type": "string"
                            },
                            "uomLabel": {
                              "type": "string"
                            },
                            "resolution": {
                              "type": "number"
                            }
                          }
                        },
                        {
                          "title": "Irregular Axis",
                          "description": "An irregular axis enumerates all possible direct position coordinates.",
                          "required": [
                            "type",
                            "axisLabel",
                            "uomLabel",
                            "coordinate"
                          ],
                          "additionalProperties": false,
                          "properties": {
                            "type": {
                              "enum": [
                                "IrregularAxis"
                              ]
                            },
                            "id": {
                              "type": "string"
                            },
                            "axisLabel": {
                              "type": "string"
                            },
                            "uomLabel": {
                              "type": "string"
                            },
                            "coordinate": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "displacement": {
                    "title": "Displacement",
                    "description": "A Displacement is a warped axis nest where points on the grid all have their individual direct position coordinates. The sequenceRule element describes linearization order.",
                    "type": "object",
                    "oneOf": [
                      {
                        "required": [
                          "type",
                          "axisLabels",
                          "uomLabels",
                          "coordinates"
                        ],
                        "properties": {
                          "type": {
                            "enum": [
                              "DisplacementAxisNest"
                            ]
                          },
                          "id": {
                            "type": "string"
                          },
                          "axisLabel": {
                            "type": "string"
                          },
                          "srsName": {
                            "type": "string",
                            "format": "uri"
                          },
                          "axisLabels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "uomLabels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "coordinates": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      {
                        "required": [
                          "type",
                          "axisLabels",
                          "uomLabels",
                          "coordinatesRef"
                        ],
                        "properties": {
                          "type": {
                            "enum": [
                              "DisplacementAxisNestRef"
                            ]
                          },
                          "id": {
                            "type": "string"
                          },
                          "axisLabel": {
                            "type": "string"
                          },
                          "srsName": {
                            "type": "string",
                            "format": "uri"
                          },
                          "axisLabels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "uomLabels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "coordinatesRef": {
                            "type": "string",
                            "format": "uri"
                          }
                        }
                      }
                    ]
                  },
                  "model": {
                    "title": "Sensor model",
                    "description": "A Transformation By Sensor Model is a transformation definition which is given by a SensorML 2.0 transformation specification.",
                    "type": "object",
                    "required": [
                      "type",
                      "sensorModelRef"
                    ],
                    "properties": {
                      "type": {
                        "enum": [
                          "TransformationBySensorModel"
                        ]
                      },
                      "id": {
                        "type": "string"
                      },
                      "axisLabels": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "uomLabels": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "sensorModelRef": {
                        "type": "string",
                        "format": "uri"
                      },
                      "sensorInstanceRef": {
                        "type": "string",
                        "format": "uri"
                      }
                    }
                  },
                  "gridLimits": {
                    "title": "Grid limits",
                    "description": "This is the boundary of the array underlying the grid, given by its diagonal corner points in integer _60_3D. The grid limits can be omitted in case all axes are of type index axis, because then it repeats the grid information in a redundant way. The purpose of the axisLabels attribute, which lists the axis labels of all axisExtent elements in proper sequence, is to enforce axis sequence also in XML systems which do not preserve document order.",
                    "type": "object",
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "type": {
                        "enum": [
                          "GridLimits"
                        ]
                      },
                      "indexAxis": {
                        "title": "Index Axis",
                        "description": "An Index Axis is an axis with only integer positions allowed.",
                        "type": "object",
                        "required": [
                          "type",
                          "lowerBound",
                          "upperBound"
                        ],
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "enum": [
                              "IndexAxis"
                            ]
                          },
                          "id": {
                            "type": "string"
                          },
                          "axisLabel": {
                            "type": "string"
                          },
                          "lowerBound": {
                            "type": "number"
                          },
                          "upperBound": {
                            "type": "number"
                          }
                        }
                      },
                      "srsName": {
                        "type": "string",
                        "format": "uri"
                      },
                      "axisLabels": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "required": [
              "type",
              "directMultiPoint"
            ],
            "properties": {
              "type": {
                "enum": [
                  "DomainSet"
                ]
              },
              "directMultiPoint": {
                "oneOf": [
                  {
                    "required": [
                      "type",
                      "coordinates"
                    ],
                    "properties": {
                      "type": {
                        "enum": [
                          "DirectMultiPoint"
                        ]
                      },
                      "coordinates": {
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "required": [
                      "type",
                      "coordinatesRef"
                    ],
                    "properties": {
                      "type": {
                        "enum": [
                          "DirectMultiPointRef"
                        ]
                      },
                      "coordinatesRef": {
                        "type": "string",
                        "format": "uri"
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "required": [
              "type",
              "fileReference"
            ],
            "properties": {
              "type": {
                "enum": [
                  "DomainSetRef"
                ]
              },
              "id": {
                "type": "string",
                "format": "uri"
              },
              "fileReference": {
                "type": "string",
                "format": "uri"
              }
            }
          }
        ]
      },
      "rangeType": {
        "title": "rangeType",
        "description": "The rangeType element describes the structure and semantics of a coverage's range values, including (optionally) restrictions on the interpolation allowed on such values.",
        "type": "object",
        "oneOf": [
          {
            "required": [
              "type",
              "field"
            ],
            "properties": {
              "type": {
                "enum": [
                  "DataRecord"
                ]
              },
              "field": {
                "type": "array",
                "items": {
                  "title": "DataRecord field",
                  "description": "e.g. Quantity or Count",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "enum": [
                        "Quantity",
                        "Count"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "format": "uri"
                    },
                    "name": {
                      "type": "string"
                    },
                    "definition": {
                      "type": "string",
                      "format": "uri"
                    },
                    "uom": {
                      "title": "units of measure",
                      "description": "units of measure",
                      "type": "object",
                      "required": [
                        "type",
                        "code"
                      ],
                      "properties": {
                        "type": {
                          "enum": [
                            "UnitReference"
                          ]
                        },
                        "id": {
                          "type": "string",
                          "format": "uri"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "constraint": {
                      "title": "Constraint",
                      "description": "Constraint",
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "enum": [
                            "AllowedValues"
                          ]
                        },
                        "id": {
                          "type": "string",
                          "format": "uri"
                        },
                        "interval": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "interpolationRestriction": {
                "title": "interpolationRestriction",
                "description": "Interpolation restriction",
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "enum": [
                      "InterpolationRestriction"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "format": "uri"
                  },
                  "allowedInterpolation": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uri"
                    }
                  }
                }
              }
            }
          },
          {
            "required": [
              "type",
              "fileReference"
            ],
            "properties": {
              "type": {
                "enum": [
                  "RangeTypeRef"
                ]
              },
              "id": {
                "type": "string",
                "format": "uri"
              },
              "fileReference": {
                "type": "string",
                "format": "uri"
              }
            }
          }
        ]
      },
      "rangeSet": {
        "title": "rangeSet",
        "description": "The rangeSet lists a value for each of the coverage's direct positions. Values resemble the *payload* information of some particular direct positions. Values can be composite (with a single nesting level, i.e.: composites always consist of atomics), or atomic (emulated through single-component composites) whereby the sequence, structure, and meaning of every value is defined through the rangeType. Values can be represented in-line or by reference to an external file which may have any suitable encoding.",
        "type": "object",
        "oneOf": [
          {
            "required": [
              "type",
              "dataBlock"
            ],
            "properties": {
              "type": {
                "enum": [
                  "RangeSet"
                ]
              },
              "dataBlock": {
                "title": "dataBlock",
                "description": "Data block objects",
                "type": "object",
                "required": [
                  "type",
                  "values"
                ],
                "properties": {
                  "type": {
                    "enum": [
                      "VDataBlock",
                      "CVDataBlock"
                    ]
                  },
                  "values": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "required": [
              "type",
              "fileReference"
            ],
            "properties": {
              "type": {
                "enum": [
                  "RangeSetRef"
                ]
              },
              "fileReference": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        ]
      },
      "coverageSchema": {
        "title": "Coverage object",
        "description": "Component of OGC Coverage Implementation Schema 1.1. Last updated: 2016-may-18. Copyright (c) 2016 Open Geospatial Consortium, Inc. All Rights Reserved. To obtain additional rights of use, visit http://www.opengeospatial.org/legal/.",
        "type": "object",
        "oneOf": [
          {
            "required": [
              "type",
              "domainSet",
              "rangeSet",
              "rangeType"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "CoverageByDomainAndRange"
                ]
              },
              "envelope": {
                "title": "envelope",
                "description": "The envelope around a coverage is defined by the lower and upper bound of each axis, respectively. The purpose of the axisLabels attribute, which lists the axis labels of all axisExtent elements in proper sequence, is to enforce axis sequence also in XML systems which do not preserve document order.",
                "type": "object",
                "required": [
                  "type",
                  "srsName",
                  "axisLabels",
                  "axis"
                ],
                "properties": {
                  "type": {
                    "enum": [
                      "EnvelopeByAxis"
                    ]
                  },
                  "id": {
                    "type": "string"
                  },
                  "srsName": {
                    "type": "string",
                    "format": "uri"
                  },
                  "axisLabels": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "axis": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "type",
                        "lowerBound",
                        "upperBound",
                        "uomLabel"
                      ],
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "enum": [
                            "AxisExtent"
                          ]
                        },
                        "id": {
                          "type": "string"
                        },
                        "axisLabel": {
                          "type": "string"
                        },
                        "lowerBound": {
                          "oneOf": [
                            {
                              "type": "number"
                            },
                            {
                              "type": "string",
                              "nullable": true
                            },
                            {
                              "type": "boolean"
                            }
                          ]
                        },
                        "upperBound": {
                          "oneOf": [
                            {
                              "type": "number"
                            },
                            {
                              "type": "string",
                              "nullable": true
                            },
                            {
                              "type": "boolean"
                            }
                          ]
                        },
                        "uomLabel": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "domainSet": {
                "$ref": "#/components/schemas/domainSet"
              },
              "rangeSet": {
                "$ref": "#/components/schemas/rangeSet"
              },
              "rangeType": {
                "$ref": "#/components/schemas/rangeType"
              },
              "metadata": {
                "title": "Metadata",
                "description": "The metadata element is a container of any (not further specified) information which should be transported along with the coverage on hand, such as domain-specific metadata.",
                "type": "object"
              }
            }
          },
          {
            "required": [
              "type",
              "partitionSet",
              "rangeType"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "CoverageByPartitioning"
                ]
              },
              "envelope": {
                "$ref": "#/components/schemas/coverageSchema/oneOf/0/properties/envelope"
              },
              "partitionSet": {
                "title": "Partitioning Set",
                "description": "A partition describes how a coverage (*sub-coverage*) referenced is located within referencing coverage (*super-coverage*). The sub-coverage can be represented by referencing a coverage id or a URL pointing to a coverage.  Such sub-coverages referenced may be grouped into the super-coverage document, or reside remote, or mixed. As an additional alternative, single range values can be indicated verbatimg, together with their direct position. All values must share an identical structure and conform to the rangeType definition.",
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "enum": [
                      "PartitionSet"
                    ]
                  },
                  "partition": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "oneOf": [
                        {
                          "required": [
                            "type",
                            "coverageRef"
                          ],
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "PartitionRef"
                              ]
                            },
                            "envelope": {
                              "$ref": "#/components/schemas/coverageSchema/oneOf/0/properties/envelope"
                            },
                            "coverageRef": {
                              "type": "string",
                              "format": "uri"
                            }
                          }
                        },
                        {
                          "required": [
                            "type",
                            "coverage"
                          ],
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "Partition"
                              ]
                            },
                            "envelope": {
                              "$ref": "#/components/schemas/coverageSchema/oneOf/0/properties/envelope"
                            },
                            "coverage": {
                              "type": "object"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "positionValuePair": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "type",
                        "coordinate",
                        "value"
                      ],
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "type": {
                          "enum": [
                            "PVP"
                          ]
                        },
                        "coordinate": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "string"
                              },
                              {
                                "type": "boolean"
                              }
                            ]
                          }
                        },
                        "value": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "string",
                                "nullable": true
                              },
                              {
                                "type": "boolean"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              },
              "rangeType": {
                "$ref": "#/components/schemas/rangeType"
              },
              "metadata": {
                "$ref": "#/components/schemas/coverageSchema/oneOf/0/properties/metadata"
              }
            }
          }
        ]
      },
      "tileSet": {
        "title": "Tile Set Metadata",
        "description": "A resource describing a tileset based on the OGC TileSet Metadata Standard. At least one of the 'TileMatrixSet',  or a link with 'rel' http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme",
        "type": "object",
        "required": [
          "dataType",
          "crs",
          "links"
        ],
        "properties": {
          "title": {
            "description": "A title for this tileset",
            "type": "string"
          },
          "description": {
            "description": "Brief narrative description of this tile set",
            "type": "string"
          },
          "dataType": {
            "allOf": [
              {
                "description": "Type of data represented in the tileset"
              },
              {
                "$ref": "#/components/schemas/dataType"
              }
            ]
          },
          "crs": {
            "allOf": [
              {
                "description": "Coordinate Reference System (CRS)"
              },
              {
                "$ref": "#/components/schemas/crs"
              }
            ]
          },
          "tileMatrixSetURI": {
            "description": "Reference to a Tile Matrix Set on an offical source for Tile Matrix Sets such as the OGC NA definition server (http://www.opengis.net/def/tms/). Required if the tile matrix set is registered on an open official source.",
            "type": "string",
            "format": "uri"
          },
          "links": {
            "description": "Links to related resources. Possible link 'rel' values are: 'http://www.opengis.net/def/rel/ogc/1.0/dataset' for a URL pointing to the dataset, 'item' for a URL template to get a tile; 'alternate' for a URL pointing to another representation of the TileSetMetadata (e.g a TileJSON file); 'http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme' for a definition of the TileMatrixSet; 'http://www.opengis.net/def/rel/ogc/1.0/geodata' for pointing to a single collection (if the tileset represents a single collection)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          },
          "tileMatrixSetLimits": {
            "description": "Limits for the TileRow and TileCol values for each TileMatrix in the tileMatrixSet. If missing, there are no limits other that the ones imposed by the TileMatrixSet. If present the TileMatrices listed are limited and the rest not available at all",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tileMatrixLimits"
            }
          },
          "epoch": {
            "description": "Epoch of the Coordinate Reference System (CRS)",
            "type": "number"
          },
          "layers": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "dataType"
              ],
              "properties": {
                "title": {
                  "description": "Title of this tile matrix set, normally used for display to a human",
                  "type": "string"
                },
                "description": {
                  "description": "Brief narrative description of this tile matrix set, normally available for display to a human",
                  "type": "string"
                },
                "keywords": {
                  "description": "Unordered list of one or more commonly used or formalized word(s) or phrase(s) used to describe this layer",
                  "type": "string"
                },
                "id": {
                  "description": "Unique identifier of the Layer. Implementation of 'identifier'",
                  "type": "string"
                },
                "dataType": {
                  "allOf": [
                    {
                      "description": "Type of data represented in the layer"
                    },
                    {
                      "$ref": "#/components/schemas/dataType"
                    }
                  ]
                },
                "geometryDimension": {
                  "description": "The geometry dimension of the features shown in this layer (0: points, 1: curves, 2: surfaces, 3: solids), unspecified: mixed or unknown",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 3
                },
                "featureType": {
                  "description": "Feature type identifier. Only applicable to layers of datatype 'geometries'",
                  "type": "string"
                },
                "attribution": {
                  "description": "Short reference to recognize the author or provider",
                  "type": "string"
                },
                "license": {
                  "description": "License applicable to the tiles",
                  "type": "string"
                },
                "pointOfContact": {
                  "description": "Useful information to contact the authors or custodians for the layer (e.g. e-mail address, a physical address,  phone numbers, etc)",
                  "type": "string"
                },
                "publisher": {
                  "description": "Organization or individual responsible for making the layer available",
                  "type": "string"
                },
                "theme": {
                  "description": "Category where the layer can be grouped",
                  "type": "string"
                },
                "crs": {
                  "allOf": [
                    {
                      "description": "Coordinate Reference System (CRS)"
                    },
                    {
                      "$ref": "#/components/schemas/crs"
                    }
                  ]
                },
                "epoch": {
                  "description": "Epoch of the Coordinate Reference System (CRS)",
                  "type": "number"
                },
                "minScaleDenominator": {
                  "description": "Minimum scale denominator for usage of the layer",
                  "type": "number"
                },
                "maxScaleDenominator": {
                  "description": "Maximum scale denominator for usage of the layer",
                  "type": "number"
                },
                "minCellSize": {
                  "description": "Minimum cell size for usage of the layer",
                  "type": "number"
                },
                "maxCellSize": {
                  "description": "Maximum cell size for usage of the layer",
                  "type": "number"
                },
                "maxTileMatrix": {
                  "description": "TileMatrix identifier associated with the minScaleDenominator",
                  "type": "string"
                },
                "minTileMatrix": {
                  "description": "TileMatrix identifier associated with the maxScaleDenominator",
                  "type": "string"
                },
                "boundingBox": {
                  "allOf": [
                    {
                      "description": "Minimum bounding rectangle surrounding the layer"
                    },
                    {
                      "$ref": "#/components/schemas/2DBoundingBox"
                    }
                  ]
                },
                "created": {
                  "allOf": [
                    {
                      "description": "When the layer was first produced"
                    },
                    {
                      "$ref": "#/components/schemas/timeStamp"
                    }
                  ]
                },
                "updated": {
                  "allOf": [
                    {
                      "description": "Last layer change/revision"
                    },
                    {
                      "$ref": "#/components/schemas/timeStamp"
                    }
                  ]
                },
                "style": {
                  "allOf": [
                    {
                      "description": "Style used to generate the layer in the tileset"
                    },
                    {
                      "$ref": "#/components/schemas/tileSet/properties/style/allOf/1"
                    }
                  ]
                },
                "geoDataClasses": {
                  "description": "URI identifying a class of data contained in this layer (useful to determine compatibility with styles or processes)",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "propertiesSchema": {
                  "allOf": [
                    {
                      "description": "Properties represented by the features in this layer. Can be the attributes of a feature dataset (datatype=geometries) or the rangeType of a coverage (datatype=coverage)"
                    },
                    {
                      "description": "Attributes of the features or rangetypes of a coverage. Defined by a subset of the JSON Schema for the properties of a feature",
                      "type": "object",
                      "required": [
                        "type",
                        "properties"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "object"
                          ]
                        },
                        "required": {
                          "description": "Implements 'multiplicity' by citing property 'name' defined as 'additionalProperties'",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "string"
                          }
                        },
                        "properties": {
                          "type": "object",
                          "default": {},
                          "additionalProperties": {
                            "description": "No property names are defined but any property name they should be described by JSON Schema. So 'additionalProperties' implements 'name'.",
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string"
                              },
                              "description": {
                                "description": "Implements 'description'",
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "array",
                                  "boolean",
                                  "integer",
                                  "null",
                                  "number",
                                  "object",
                                  "string"
                                ]
                              },
                              "enum": {
                                "description": "Implements 'acceptedValues'",
                                "type": "array",
                                "minItems": 1,
                                "items": {},
                                "uniqueItems": true
                              },
                              "format": {
                                "description": "Complements implementation of 'type'",
                                "type": "string"
                              },
                              "contentMediaType": {
                                "description": "Implements 'mediaType'",
                                "type": "string"
                              },
                              "maximum": {
                                "description": "Implements 'range'",
                                "type": "number"
                              },
                              "exclusiveMaximum": {
                                "description": "Implements 'range'",
                                "type": "number"
                              },
                              "minimum": {
                                "description": "Implements 'range'",
                                "type": "number"
                              },
                              "exclusiveMinimum": {
                                "description": "Implements 'range'",
                                "type": "number"
                              },
                              "pattern": {
                                "type": "string",
                                "format": "regex"
                              },
                              "maxItems": {
                                "description": "Implements 'upperMultiplicity'",
                                "type": "integer",
                                "minimum": 0
                              },
                              "minItems": {
                                "description": "Implements 'lowerMultiplicity'",
                                "type": "integer",
                                "default": 0,
                                "minimum": 0
                              },
                              "observedProperty": {
                                "type": "string"
                              },
                              "observedPropertyURI": {
                                "type": "string",
                                "format": "uri"
                              },
                              "uom": {
                                "type": "string"
                              },
                              "uomURI": {
                                "type": "string",
                                "format": "uri"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "links": {
                  "description": "Links related to this layer. Possible link 'rel' values are: 'geodata' for a URL pointing to the collection of geospatial data.",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "$ref": "#/components/schemas/link"
                  }
                }
              }
            }
          },
          "boundingBox": {
            "allOf": [
              {
                "description": "Minimum bounding rectangle surrounding the tile matrix set, in the supported CRS"
              },
              {
                "$ref": "#/components/schemas/2DBoundingBox"
              }
            ]
          },
          "centerPoint": {
            "allOf": [
              {
                "description": "Location of a tile that nicely represents the tileset. Implementations may use this center value to set the default location or to present a representative tile in a user interface"
              },
              {
                "type": "object",
                "required": [
                  "coordinates"
                ],
                "properties": {
                  "coordinates": {
                    "type": "array",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": {
                      "type": "number"
                    }
                  },
                  "crs": {
                    "allOf": [
                      {
                        "description": "Coordinate Reference System (CRS) of the coordinates"
                      },
                      {
                        "$ref": "#/components/schemas/crs"
                      }
                    ]
                  },
                  "tileMatrix": {
                    "description": "TileMatrix identifier associated with the scaleDenominator",
                    "type": "string"
                  },
                  "scaleDenominator": {
                    "description": "Scale denominator of the tile matrix selected",
                    "type": "number"
                  },
                  "cellSize": {
                    "description": "Cell size of the tile matrix selected",
                    "type": "number"
                  }
                }
              }
            ]
          },
          "style": {
            "allOf": [
              {
                "description": "Style involving all layers used to generate the tileset"
              },
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "An identifier for this style. Implementation of 'identifier'",
                    "type": "string"
                  },
                  "title": {
                    "description": "A title for this style",
                    "type": "string"
                  },
                  "description": {
                    "description": "Brief narrative description of this style",
                    "type": "string"
                  },
                  "keywords": {
                    "description": "keywords about this style",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "links": {
                    "description": "Links to style related resources. Possible link 'rel' values are: 'style' for a URL pointing to the style description, 'styleSpec' for a URL pointing to the specification or standard used to define the style.",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "$ref": "#/components/schemas/link"
                    }
                  }
                }
              }
            ]
          },
          "attribution": {
            "description": "Short reference to recognize the author or provider",
            "type": "string"
          },
          "license": {
            "description": "License applicable to the tiles",
            "type": "string"
          },
          "accessConstraints": {
            "description": "Restrictions on the availability of the Tile Set that the user needs to be aware of before using or redistributing the Tile Set",
            "type": "string",
            "default": "unclassified",
            "enum": [
              "unclassified",
              "restricted",
              "confidential",
              "secret",
              "topSecret"
            ]
          },
          "keywords": {
            "description": "keywords about this tileset",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "description": "Version of the Tile Set. Changes if the data behind the tiles has been changed",
            "type": "string"
          },
          "created": {
            "allOf": [
              {
                "description": "When the Tile Set was first produced"
              },
              {
                "$ref": "#/components/schemas/timeStamp"
              }
            ]
          },
          "updated": {
            "allOf": [
              {
                "description": "Last Tile Set change/revision"
              },
              {
                "$ref": "#/components/schemas/timeStamp"
              }
            ]
          },
          "pointOfContact": {
            "description": "Useful information to contact the authors or custodians for the Tile Set",
            "type": "string"
          },
          "mediaTypes": {
            "description": "Media types available for the tiles",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "tileSet-item": {
        "title": "Tile Set Metadata item",
        "description": "A minimal tileset element for use within a list of tilesets linking to full description of those tilesets.",
        "type": "object",
        "required": [
          "dataType",
          "links",
          "crs"
        ],
        "properties": {
          "title": {
            "description": "A title for this tileset",
            "type": "string"
          },
          "dataType": {
            "allOf": [
              {
                "description": "Type of data represented in the tileset"
              },
              {
                "$ref": "#/components/schemas/dataType"
              }
            ]
          },
          "crs": {
            "allOf": [
              {
                "description": "Coordinate Reference System (CRS)"
              },
              {
                "$ref": "#/components/schemas/crs"
              }
            ]
          },
          "tileMatrixSetURI": {
            "description": "Reference to a Tile Matrix Set on an offical source for Tile Matrix Sets such as the OGC NA definition server (http://www.opengis.net/def/tms/). Required if the tile matrix set is registered on an open official source.",
            "type": "string",
            "format": "uri"
          },
          "links": {
            "description": "Links to related resources. A 'self' link to the tileset as well as a 'http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme' link to a definition of the TileMatrixSet are required.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          }
        }
      },
      "tileMatrixLimits": {
        "title": "TileMatrixLimits",
        "description": "The limits for an individual tile matrix of a TileSet's TileMatrixSet, as defined in the OGC 2D TileMatrixSet and TileSet Metadata Standard",
        "type": "object",
        "required": [
          "tileMatrix",
          "minTileRow",
          "maxTileRow",
          "minTileCol",
          "maxTileCol"
        ],
        "properties": {
          "tileMatrix": {
            "type": "string"
          },
          "minTileRow": {
            "type": "integer",
            "minimum": 0
          },
          "maxTileRow": {
            "type": "integer",
            "minimum": 0
          },
          "minTileCol": {
            "type": "integer",
            "minimum": 0
          },
          "maxTileCol": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "2DPoint": {
        "description": "A 2D Point in the CRS indicated elsewhere",
        "type": "array",
        "minItems": 2,
        "maxItems": 2,
        "items": {
          "type": "number"
        }
      },
      "2DBoundingBox": {
        "description": "Minimum bounding rectangle surrounding a 2D resource in the CRS indicated elsewhere",
        "type": "object",
        "required": [
          "lowerLeft",
          "upperRight"
        ],
        "properties": {
          "lowerLeft": {
            "$ref": "#/components/schemas/2DPoint"
          },
          "upperRight": {
            "$ref": "#/components/schemas/2DPoint"
          },
          "crs": {
            "$ref": "#/components/schemas/crs"
          },
          "orderedAxes": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "enumeration": {
        "type": "object",
        "required": [
          "type",
          "enum"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "enum"
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "all-collections": {
        "type": "string",
        "enum": [
          "blueMarble",
          "NaturalEarth:raster:HYP_HR_SR_OB_DR",
          "NaturalEarth:cultural:ne_10m_admin_0_countries",
          "NaturalEarth:physical:bathymetry",
          "SRTM_ViewFinderPanorama",
          "HRDEM-Ottawa",
          "HRDEM-RedRiver"
        ]
      },
      "coverage-collections": {
        "type": "string",
        "enum": [
          "SRTM_ViewFinderPanorama",
          "HRDEM-Ottawa",
          "HRDEM-RedRiver"
        ]
      },
      "tileMatrixSets": {
        "type": "string",
        "enum": [
          "WebMercatorQuad",
          "WorldCRS84Quad",
          "GNOSISGlobalGrid",
          "WorldMercatorWGS84Quad"
        ]
      }
    },
    "parameters": {
      "f-metadata": {
        "name": "f",
        "in": "query",
        "description": "The format of the response. If no value is provided, the accept header is used to determine the format. Accepted values are 'json' or 'html'.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "json",
            "html"
          ]
        },
        "style": "form",
        "explode": false
      },
      "collectionId-all": {
        "name": "collectionId",
        "in": "path",
        "description": "Local identifier of a collection",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/all-collections"
        }
      },
      "collectionId-coverage": {
        "name": "collectionId",
        "in": "path",
        "description": "Local identifier of a coverage collection",
        "required": true,
        "allowEmptyValue": false,
        "schema": {
          "$ref": "#/components/schemas/coverage-collections"
        },
        "style": "simple",
        "explode": false
      },
      "datetime": {
        "name": "datetime",
        "in": "query",
        "description": "Either a date-time or an interval, half-bounded or bounded. Date and time expressions\nadhere to RFC 3339. Half-bounded intervals are expressed using double-dots.\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
        "required": false,
        "schema": {
          "type": "string"
        },
        "style": "form",
        "explode": false
      },
      "subset": {
        "name": "subset",
        "in": "query",
        "description": "Retrieve only part of the data by slicing or trimming along one or more axis\nFor trimming: {axisAbbrev}({low}:{high}) (preserves dimensionality)\n   An asterisk (`*`) can be used instead of {low} or {high} to indicate the minimum/maximum value.\nFor slicing:  {axisAbbrev}({value})      (reduces dimensionality)\n",
        "style": "form",
        "explode": false,
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "bbox": {
        "name": "bbox",
        "in": "query",
        "description": "Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (height or depth):\n* Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Minimum value, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Maximum value, coordinate axis 3 (optional)\nThe coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.\nFor WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).\nIf the vertical axis is included, the third and the sixth number are the bottom and the top of the 3-dimensional bounding box.\nIf a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.",
        "required": false,
        "schema": {
          "type": "array",
          "oneOf": [
            {
              "minItems": 4,
              "maxItems": 4
            },
            {
              "minItems": 6,
              "maxItems": 6
            }
          ],
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "style": "form",
        "explode": false
      },
      "crs": {
        "name": "crs",
        "in": "query",
        "description": "reproject the output to the given crs",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "subset-crs": {
        "name": "subset-crs",
        "in": "query",
        "description": "crs for the specified subset",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "bbox-crs": {
        "name": "bbox-crs",
        "in": "query",
        "description": "crs for the specified bbox",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "scale-factor": {
        "name": "scale-factor",
        "in": "query",
        "description": "For each axis, the returned coverage will contain the number of original\nsampled values, divided by the scale-factor.",
        "required": false,
        "schema": {
          "type": "number"
        }
      },
      "scale-axes": {
        "name": "scale-axes",
        "in": "query",
        "description": "Returns a coverage re-scaled so as to contain `{number}` times less sample\nvalues along the corresponding axisName axis, and all original values along\nthe dimensions of unspecified axes\n```\nScalingSpec:       \"scale-axes\"=axisName({number})[,axisName({number})]*\naxisName:          {NCName}\n\nWhere:\n   {number} is an integer or floating-point number, and {axisName} is the\n   same as one of the axisLabels defined in the DomainSet\n```",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "scale-size": {
        "name": "scale-size",
        "in": "query",
        "description": "When `scale-size` is used, the returned coverage will contain exactly the\nspecified number of sample values along each axis which is specified, and\nthe original number of sample values for unspecified axes.\n```\nScalingSpec:       \"scale-size\"=axisName({number})[,axisName({number})]*\naxisName:          {text}\n\nWhere:\n   {number} is an integer or floating-point number and {axisName}\n   is the same as one of the axisLabels defined in the DomainSet\n```",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "properties": {
        "name": "properties",
        "in": "query",
        "description": "Select specific data record fields (measured/observed properties) to be returned.\n\n```\nRangeSubsetSpec:   \"properties\"=field[,fieldName]*\nfield:              {fieldName}|{fieldIndex}|\"*\"\nfieldName:          {text}\nfieldIndex:         {number}\n\nWhere:\n   {number} is an integer number, and\n   {text} is some general ASCII text.\n```\n\nThe field name must be one of the id defined in the RangeType DataRecord fields.\nThe field index must be an integer between 0 and the number of fields - 1 defined in the RangeType DataRecord fields.\nAn asterisk indicates to also include subsequent fields.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "f-coverage": {
        "name": "f",
        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document. It has preference over the HTTP Accept header.",
        "explode": false,
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "png",
            "geotiff",
            "netcdf",
            "json",
            "covjson",
            "html"
          ]
        },
        "style": "form"
      },
      "f-rangeset": {
        "name": "f",
        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document. It has preference over the HTTP Accept header.",
        "explode": false,
        "in": "query",
        "required": false,
        "schema": {
          "default": "json",
          "enum": [
            "json",
            "html"
          ],
          "type": "string"
        },
        "style": "form"
      },
      "f-domainset": {
        "name": "f",
        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document. It has preference over the HTTP Accept header.",
        "explode": false,
        "in": "query",
        "required": false,
        "schema": {
          "default": "json",
          "enum": [
            "json",
            "html"
          ],
          "type": "string"
        },
        "style": "form"
      },
      "f-rangetype": {
        "name": "f",
        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document. It has preference over the HTTP Accept header.",
        "explode": false,
        "in": "query",
        "required": false,
        "schema": {
          "default": "json",
          "enum": [
            "json",
            "html"
          ],
          "type": "string"
        },
        "style": "form"
      },
      "tileMatrix": {
        "name": "tileMatrix",
        "in": "path",
        "description": "Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile. For example,\nIreland is fully within the Tile at WebMercatorQuad tileMatrix=5, tileRow=10 and tileCol=15.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "5"
      },
      "tileRow": {
        "name": "tileRow",
        "in": "path",
        "description": "Row index of the tile on the selected TileMatrix. It cannot exceed the MatrixWidth-1 for the selected TileMatrix. For example, Ireland is fully within the Tile at WebMercatorQuad tileMatrix=5, tileRow=10 and tileCol=15.",
        "required": true,
        "schema": {
          "minimum": 0,
          "type": "integer"
        },
        "example": 10
      },
      "tileCol": {
        "name": "tileCol",
        "in": "path",
        "description": "Column index of the tile on the selected TileMatrix. It cannot exceed the MatrixHeight-1 for the selected TileMatrix. For example, Ireland is fully within the Tile at WebMercatorQuad tileMatrix=5, tileRow=10 and tileCol=15.",
        "required": true,
        "schema": {
          "minimum": 0,
          "type": "integer"
        },
        "example": 15
      },
      "tileMatrixSetId": {
        "name": "tileMatrixSetId",
        "in": "path",
        "description": "Identifier for a supported TileMatrixSet",
        "required": true,
        "allowEmptyValue": false,
        "schema": {
          "$ref": "#/components/schemas/tileMatrixSets"
        }
      },
      "f-coverageTile": {
        "name": "f",
        "in": "query",
        "description": "The format of the coverage tile response (e.g. tiff). Accepted values are 'tiff' (GeoTIFF), 'netcdf', or 'png'.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "png",
            "geotiff",
            "netcdf"
          ]
        },
        "style": "form",
        "explode": false
      }
    },
    "responses": {
      "NotFound": {
        "description": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "NotAcceptable": {
        "description": "Content negotiation failed. For example, the `Accept` header submitted in the request did not support any of the media types supported by the server for the requested resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "ServerError": {
        "description": "A server error occurred.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "InvalidParameter": {
        "description": "A query parameter has an invalid value.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "Exception": {
        "description": "An error occured.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "LandingPage": {
        "description": "The landing page provides links to the API definition (link relation `service-desc`, in this case path `/api`),\nto the Conformance declaration (path `/conformance`, link relation `conformance`), and to the Collections of geospatial data (path `/collections`, link relation `data`).",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/landingPage"
            },
            "example": {
              "title": "Elevation in Bonn",
              "description": "Access to elevation data in the city of Bonn via a Web API that conforms to the OGC API - Coverages specification.",
              "links": [
                {
                  "href": "http://data.example.org/",
                  "rel": "self",
                  "type": "application/json",
                  "title": "this document"
                },
                {
                  "href": "http://data.example.org/api",
                  "rel": "service-desc",
                  "type": "application/vnd.oai.openapi+json;version=3.0",
                  "title": "the API definition"
                },
                {
                  "href": "http://data.example.org/api.html",
                  "rel": "service-doc",
                  "type": "text/html",
                  "title": "the API documentation"
                },
                {
                  "href": "http://data.example.org/conformance",
                  "rel": "http://www.opengis.net/def/rel/ogc/1.0/conformance",
                  "type": "application/json",
                  "title": "OGC API conformance classes implemented by this service"
                },
                {
                  "href": "http://data.example.org/collections",
                  "rel": "http://www.opengis.net/def/rel/ogc/1.0/data",
                  "type": "application/json",
                  "title": "Information about the collections (e.g. the coverages)"
                }
              ]
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "Conformance": {
        "description": "The URIs of all conformance classes supported by the server",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/confClasses"
                }
              ],
              "example": {
                "conformsTo": [
                  "http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/core",
                  "http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/json",
                  "http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/html",
                  "http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/oas30",
                  "http://www.opengis.net/spec/ogcapi-common-2/1.0/conf/collections",
                  "http://www.opengis.net/spec/ogcapi-coverages-1/1.0/conf/geodata-coverage",
                  "http://www.opengis.net/spec/ogcapi-coverages-1/1.0/conf/cisjson",
                  "http://www.opengis.net/spec/ogcapi-coverages-1/1.0/conf/html",
                  "http://www.opengis.net/spec/ogcapi-coverages-1/1.0/conf/coverage-subset",
                  "http://www.opengis.net/spec/ogcapi-coverages-1/1.0/conf/oas30"
                ]
              }
            }
          }
        }
      },
      "API": {
        "description": "The OpenAPI definition of the API.",
        "content": {
          "application/vnd.oai.openapi+json;version=3.0": {
            "schema": {
              "type": "object"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "Enumeration": {
        "description": "An enumerated list of valid string values for API parameters.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/enumeration"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "CollectionsList": {
        "description": "The collections of (mostly geospatial) data available from this API. The dataset contains one or more collections. This resource provides information about and access to the collections. The response contains the list of collections. Each collection is accessible via one or more OGC API set of specifications, for which a link to relevant accessible resources, e.g. /collections/{collectionId}/(items, coverage, map, tiles...) is provided, with the corresponding relation type, as well as key information about the collection. This information includes:\n* a local identifier for the collection that is unique for the dataset;\n* a list of coordinate reference systems (CRS) in which data may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n* an optional title and description for the collection;\n* an optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n* for collections accessible via the Features or Records API, an optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/collections"
                },
                {
                  "type": "object",
                  "properties": {
                    "collections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/responses/Collection/content/application~1json/schema"
                      }
                    }
                  }
                }
              ]
            },
            "example": {
              "links": [
                {
                  "href": "http://data.example.org/collections.json",
                  "rel": "self",
                  "type": "application/json",
                  "title": "this document"
                },
                {
                  "href": "http://data.example.org/collections.html",
                  "rel": "alternate",
                  "type": "text/html",
                  "title": "this document as HTML"
                },
                {
                  "href": "http://download.example.org/elevation.gpkg",
                  "rel": "enclosure",
                  "type": "application/geopackage+sqlite3",
                  "title": "Bulk download (GeoPackage)",
                  "length": 472546
                }
              ],
              "collections": [
                {
                  "id": "elevation",
                  "title": "Elevation",
                  "description": "Elevation in the city of Bonn.",
                  "extent": {
                    "spatial": {
                      "bbox": [
                        [
                          7.01,
                          50.63,
                          7.22,
                          50.78
                        ]
                      ]
                    }
                  },
                  "links": [
                    {
                      "href": "http://data.example.org/collections/elevation/coverage/domainset",
                      "rel": "http://www.opengis.net/def/rel/ogc/1.0/coverage-domainset",
                      "type": "application/json",
                      "title": "Elevation"
                    },
                    {
                      "href": "http://data.example.org/collections/elevation/coverage/rangetype",
                      "rel": "http://www.opengis.net/def/rel/ogc/1.0/coverage-rangetype",
                      "type": "application/json",
                      "title": "Elevation"
                    },
                    {
                      "href": "http://data.example.org/collections/elevation/coverage",
                      "rel": "items",
                      "type": "application/json",
                      "title": "Elevation"
                    },
                    {
                      "href": "http://data.example.org/collections/elevation/coverage.html",
                      "rel": "items",
                      "type": "text/html",
                      "title": "Elevation"
                    },
                    {
                      "href": "https://creativecommons.org/publicdomain/zero/1.0/",
                      "rel": "license",
                      "type": "text/html",
                      "title": "CC0-1.0"
                    },
                    {
                      "href": "https://creativecommons.org/publicdomain/zero/1.0/rdf",
                      "rel": "license",
                      "type": "application/rdf+xml",
                      "title": "CC0-1.0"
                    }
                  ]
                }
              ]
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "Collection": {
        "description": "Information about a particular collection of (mostly geospatial) data available from this API. The collection is accessible via one or more OGC API set of specifications, for which a link to relevant accessible resources, e.g. /collections/{collectionId}/(items, coverage, map, tiles...) is contained in the response, with the corresponding relation type, as well as key information about the collection. This information includes:\n* a local identifier for the collection that is unique for the dataset;\n* a list of coordinate reference systems (CRS) in which data may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n* an optional title and description for the collection;\n* an optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n* for collections accessible via the Features or Records API, an optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/collectionInfo"
                },
                {
                  "type": "object",
                  "required": [
                    "extent"
                  ],
                  "properties": {
                    "orderedAxes": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "string",
                        "description": "axis labels of all dimensions listed in CRS order. Spatial dimensions should be listed separately here."
                      }
                    },
                    "domainSet": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/domainSet"
                        }
                      ],
                      "example": {
                        "type": "DomainSet",
                        "generalGrid": {
                          "type": "GeneralGridCoverage",
                          "srsName": "http://www.opengis.net/def/crs/EPSG/0/4326",
                          "axisLabels": [
                            "Lat",
                            "Long"
                          ],
                          "axis": [
                            {
                              "type": "RegularAxis",
                              "axisLabel": "Lat",
                              "lowerBound": -90,
                              "upperBound": 90,
                              "uomLabel": "deg",
                              "resolution": 1
                            },
                            {
                              "type": "RegularAxis",
                              "axisLabel": "Long",
                              "lowerBound": -180,
                              "upperBound": 180,
                              "uomLabel": "deg",
                              "resolution": 1
                            }
                          ],
                          "gridLimits": {
                            "type": "GridLimits",
                            "srsName": "http://www.opengis.net/def/crs/OGC/0/Index2D",
                            "axisLabels": [
                              "i",
                              "j"
                            ],
                            "axis": [
                              {
                                "type": "IndexAxis",
                                "axisLabel": "i",
                                "lowerBound": 0,
                                "upperBound": 180
                              },
                              {
                                "type": "IndexAxis",
                                "axisLabel": "j",
                                "lowerBound": 0,
                                "upperBound": 360
                              }
                            ]
                          }
                        }
                      }
                    },
                    "rangeType": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/rangeType"
                        }
                      ],
                      "example": {
                        "type": "DataRecord",
                        "field": {
                          "type": "Quantity",
                          "id": "dem_field",
                          "name": "dem field",
                          "definition": "unsignedInt",
                          "uom": {
                            "type": "UnitReference",
                            "code": "m"
                          },
                          "constraint": {
                            "type": "AllowedValues",
                            "interval": [
                              0,
                              10000
                            ]
                          }
                        },
                        "interpolationRestriction": {
                          "type": "InterpolationRestriction",
                          "allowedInterpolation": [
                            "linear"
                          ]
                        }
                      }
                    }
                  }
                }
              ]
            },
            "example": {
              "id": "elevation",
              "title": "Elevation",
              "description": "Elevation in the city of Bonn.",
              "extent": {
                "spatial": {
                  "bbox": [
                    [
                      7.01,
                      50.63,
                      7.22,
                      50.78
                    ]
                  ]
                }
              },
              "links": [
                {
                  "href": "http://data.example.org/collections/elevation/coverage/domainset",
                  "rel": "http://www.opengis.net/def/rel/ogc/1.0/coverage-domainset",
                  "type": "application/json",
                  "title": "Elevation"
                },
                {
                  "href": "http://data.example.org/collections/elevation/coverage/rangetype",
                  "rel": "http://www.opengis.net/def/rel/ogc/1.0/coverage-rangetype",
                  "type": "application/json",
                  "title": "Elevation"
                },
                {
                  "href": "http://data.example.org/collections/elevation/coverage",
                  "rel": "http://www.opengis.net/def/rel/ogc/1.0/coverage",
                  "type": "application/json",
                  "title": "Elevation"
                },
                {
                  "href": "http://data.example.org/collections/buildings/coverage.html",
                  "rel": "http://www.opengis.net/def/rel/ogc/1.0/coverage",
                  "type": "text/html",
                  "title": "Elevation"
                },
                {
                  "href": "https://creativecommons.org/publicdomain/zero/1.0/",
                  "rel": "license",
                  "type": "text/html",
                  "title": "CC0-1.0"
                },
                {
                  "href": "https://creativecommons.org/publicdomain/zero/1.0/rdf",
                  "rel": "license",
                  "type": "application/rdf+xml",
                  "title": "CC0-1.0"
                }
              ]
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "TileSetsList": {
        "description": "List of available tilesets.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "tilesets"
              ],
              "properties": {
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/link"
                  }
                },
                "tilesets": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tileSet-item"
                  }
                }
              }
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "TileSet": {
        "description": "Description of the tileset",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/tileSet"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "CoverageTile": {
        "description": "A coverage tile returned as a response.",
        "content": {
          "application/netcdf": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "image/tiff; application=geotiff": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "EmptyTile": {
        "description": "No data available for this tile."
      }
    }
  }
}
